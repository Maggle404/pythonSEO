Index: main.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># This is a sample Python script.\r\n\r\n# Press Maj+F10 to execute it or replace it with your code.\r\n# Press Double Shift to search everywhere for classes, files, tool windows, actions, and settings.\r\nfrom flask import Flask\r\nfrom flask_sqlalchemy import SQLAlchemy\r\n\r\n\r\napp = Flask(__name__)\r\napp.config['SECRET_KEY'] = 'test'\r\napp.config['SQLALCHEMY_DATABASE_URI'] = 'mysql+mysqlconnector://root:@localhost/pythonseo'\r\napp.config[\"SQLALCHEMY_TRACK_MODIFICATIONS\"] = False\r\ndb = SQLAlchemy(app)\r\n\r\n\r\nclass Users(db.Model):\r\n    id = db.Column(db.Integer, primary_key=True)\r\n    email = db.Column(db.String(255), unique=True, nullable=False)\r\n    password = db.Column(db.String(255))\r\n\r\nclass Analysis(db.Model):\r\n    id = db.Column(db.Integer, primary_key=True, autoincrement=True)\r\n    user_id = db.Column(db.Integer, db.ForeignKey('users.id'))\r\n    url = db.Column(db.String(255))\r\n    title_tag = db.Column(db.String(255))\r\n    internal_links = db.Column(db.Integer)\r\n    external_links = db.Column(db.Integer)\r\n    broken_internal_links = db.Column(db.Integer)\r\n    broken_external_links = db.Column(db.Integer)\r\n    h1_tag = db.Column(db.String(255))\r\n    h2_tags = db.Column(db.Integer)\r\n    h3_tags = db.Column(db.Integer)\r\n    img_without_alt = db.Column(db.Integer)\r\n    header_tag = db.Column(db.Boolean)\r\n    main_tag = db.Column(db.Boolean)\r\n    footer_tag = db.Column(db.Boolean)\r\n    nav_tags = db.Column(db.Integer)\r\n    div_nesting = db.Column(db.Integer)\r\n\r\nwith app.app_context():\r\n    db.create_all()\r\n\r\n# See PyCharm help at https://www.jetbrains.com/help/pycharm/\r\n\r\n\r\n\r\nif __name__ == \"__main__\":\r\n\r\n    app.run(debug=True)\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/main.py b/main.py
--- a/main.py	
+++ b/main.py	
@@ -25,8 +25,8 @@
     title_tag = db.Column(db.String(255))
     internal_links = db.Column(db.Integer)
     external_links = db.Column(db.Integer)
-    broken_internal_links = db.Column(db.Integer)
-    broken_external_links = db.Column(db.Integer)
+    broken_internal_links = db.Column(db.String(255))
+    broken_external_links = db.Column(db.String(255))
     h1_tag = db.Column(db.String(255))
     h2_tags = db.Column(db.Integer)
     h3_tags = db.Column(db.Integer)
Index: .idea/misc.xml
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
new file mode 100644
--- /dev/null	
+++ b/.idea/misc.xml	
@@ -0,0 +1,10 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="Black">
+    <option name="sdkName" value="Python 3.12" />
+  </component>
+  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.12" project-jdk-type="Python SDK" />
+  <component name="PyCharmProfessionalAdvertiser">
+    <option name="shown" value="true" />
+  </component>
+</project>
\ No newline at end of file
Index: .idea/inspectionProfiles/profiles_settings.xml
===================================================================
diff --git a/.idea/inspectionProfiles/profiles_settings.xml b/.idea/inspectionProfiles/profiles_settings.xml
new file mode 100644
--- /dev/null	
+++ b/.idea/inspectionProfiles/profiles_settings.xml	
@@ -0,0 +1,6 @@
+<component name="InspectionProjectProfileManager">
+  <settings>
+    <option name="USE_PROJECT_PROFILE" value="false" />
+    <version value="1.0" />
+  </settings>
+</component>
\ No newline at end of file
Index: .idea/vcs.xml
===================================================================
diff --git a/.idea/vcs.xml b/.idea/vcs.xml
new file mode 100644
--- /dev/null	
+++ b/.idea/vcs.xml	
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="VcsDirectoryMappings">
+    <mapping directory="$PROJECT_DIR$/.." vcs="Git" />
+  </component>
+</project>
\ No newline at end of file
Index: .idea/.gitignore
===================================================================
diff --git a/.idea/.gitignore b/.idea/.gitignore
new file mode 100644
--- /dev/null	
+++ b/.idea/.gitignore	
@@ -0,0 +1,3 @@
+# Default ignored files
+/shelf/
+/workspace.xml
Index: analysis.py
===================================================================
diff --git a/analysis.py b/analysis.py
new file mode 100644
--- /dev/null	
+++ b/analysis.py	
@@ -0,0 +1,111 @@
+from bs4 import BeautifulSoup
+import requests
+import mysql.connector
+from mysql.connector import Error
+from itertools import islice
+from urllib.parse import urlparse, urljoin
+
+def connection():
+    try:
+        conn = mysql.connector.connect(
+            host='localhost',
+            user='root',
+            password='',
+            database='pythonseo'
+        )
+        if conn.is_connected():
+            return conn
+    except Error as e:
+        print(f"Erreur lors de la connexion Ã  MySQL: {e}")
+        return None
+
+def extract_domain_name(url):
+    if 'www' in url:
+        www_domain = url.split('.')
+        return www_domain[1]
+    else:
+        domain = urlparse(url).netloc
+        domain_parts = domain.split('.')
+        return domain_parts[0]
+
+def get_links(url, soup):
+    links = soup.find_all('a')
+    domain_name = extract_domain_name(url)
+    internal_links = list(islice((link for link in links if domain_name in urlparse(link.get('href')).netloc or link.get('href').startswith(('/', '#'))), 10))
+    external_links = list(islice((link for link in links if link.get('href') and not link.get('href').startswith(('/', '#')) and domain_name not in urlparse(link.get('href')).netloc), 10))
+
+    broken_internal_links = []
+    broken_external_links = []
+
+    for link in internal_links:
+        href = link.get("href")
+        full_url = urljoin(url, href)
+        response = requests.get(full_url)
+        if response.status_code == 404:
+            broken_internal_links.append(href)
+
+    for link in external_links:
+        href = link.get("href")
+        full_url = urljoin(url, href)
+        response = requests.get(full_url)
+        if response.status_code == 404:
+            broken_external_links.append(href)
+
+    return links, internal_links, external_links, broken_internal_links, broken_external_links
+
+
+def analyze_url(url):
+    conn = connection()
+    cursor = None
+    if conn is not None:
+        try:
+            response = requests.get(url)
+            soup = BeautifulSoup(response.text, 'html.parser')
+
+            title_tag = soup.title
+            links, internal_links, external_links, broken_internal_links, broken_external_links = get_links(url, soup)
+            h1_tag = soup.h1
+            h2_tags = soup.find_all('h2')
+            h3_tags = soup.find_all('h3')
+            images = soup.find_all('img')
+            images_without_alt = [img for img in images if not img.get('alt')]
+            header_tag = soup.header is not None
+            main_tag = soup.main is not None
+            footer_tag = soup.footer is not None
+            nav_tags = soup.find_all('nav')
+            div_tags = soup.find_all('div')
+
+            cursor = conn.cursor()
+            query = ("INSERT INTO analysis (user_id, url, title_tag,"
+                     "internal_links, external_links, broken_internal_links,"
+                     "broken_external_links, h1_tag, h2_tags, h3_tags, img_without_alt,"
+                     "header_tag, main_tag, footer_tag, nav_tags, div_nesting)"
+                     "VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)")
+            params = [
+                1,
+                url if url is not None else None,
+                title_tag.string if title_tag and title_tag.string is not None else None,
+                len(internal_links) if internal_links is not None else None,
+                len(external_links) if external_links is not None else None,
+                ', '.join(broken_internal_links) if broken_internal_links is not None else None,
+                ', '.join(broken_external_links) if broken_external_links is not None else None,
+                h1_tag.string if h1_tag and h1_tag.string is not None else None,
+                len(h2_tags) if h2_tags is not None else None,
+                len(h3_tags) if h3_tags is not None else None,
+                len(images_without_alt) if images_without_alt is not None else None,
+                header_tag if header_tag is not None else None,
+                main_tag if main_tag is not None else None,
+                footer_tag if footer_tag is not None else None,
+                len(nav_tags) if nav_tags is not None else None,
+                len(div_tags) if div_tags is not None else None
+            ]
+
+            cursor.execute(query, params)
+            conn.commit()
+        except Error as e:
+            print(f"Erreur lors de l'ajout de l'analyse : {e}")
+        finally:
+            cursor.close()
+            conn.close()
+
+analyze_url('https://www.youtube.com/')
\ No newline at end of file
Index: .idea/pythonseo.iml
===================================================================
diff --git a/.idea/pythonseo.iml b/.idea/pythonseo.iml
new file mode 100644
--- /dev/null	
+++ b/.idea/pythonseo.iml	
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module type="PYTHON_MODULE" version="4">
+  <component name="NewModuleRootManager">
+    <content url="file://$MODULE_DIR$" />
+    <orderEntry type="inheritedJdk" />
+    <orderEntry type="sourceFolder" forTests="false" />
+  </component>
+</module>
\ No newline at end of file
Index: .idea/modules.xml
===================================================================
diff --git a/.idea/modules.xml b/.idea/modules.xml
new file mode 100644
--- /dev/null	
+++ b/.idea/modules.xml	
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectModuleManager">
+    <modules>
+      <module fileurl="file://$PROJECT_DIR$/.idea/pythonseo.iml" filepath="$PROJECT_DIR$/.idea/pythonseo.iml" />
+    </modules>
+  </component>
+</project>
\ No newline at end of file
Index: ../.idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"Black\">\r\n    <option name=\"sdkName\" value=\"Python 3.12 (ProjetPython)\" />\r\n  </component>\r\n  <component name=\"ProjectRootManager\" version=\"2\" project-jdk-name=\"Python 3.12 (pythonSEO) (2)\" project-jdk-type=\"Python SDK\" />\r\n</project>
===================================================================
diff --git a/../.idea/misc.xml b/../.idea/misc.xml
--- a/../.idea/misc.xml	
+++ b/../.idea/misc.xml	
@@ -1,7 +1,6 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
-  <component name="Black">
-    <option name="sdkName" value="Python 3.12 (ProjetPython)" />
+  <component name="PyCharmProfessionalAdvertiser">
+    <option name="shown" value="true" />
   </component>
-  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.12 (pythonSEO) (2)" project-jdk-type="Python SDK" />
 </project>
\ No newline at end of file
